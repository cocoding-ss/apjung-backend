buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}


plugins {
    id "org.asciidoctor.convert" version "2.4.0"
    id "com.google.cloud.tools.jib" version "2.5.0"
    id "jacoco"
    id "idea"
    id "org.flywaydb.flyway" version "7.0.3"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
    asciidoctor
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

tasks.whenTaskAdded { task ->
    if(task.name.equals("lint")) {
        task.enabled = false
    }
}

sourceCompatibility = '11'

dependencies {
    /**
     * Spring Boot Dependencies
     */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Yaml Resource Resolver
    implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'

    /**
     * QueryDSL
     */
    compile("com.querydsl:querydsl-jpa")
    compile("com.querydsl:querydsl-apt")

    /**
     * Lombok
     */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    /**
     * Database Dependencies
     */
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'
    compile "org.flywaydb:flyway-core"


    /**
     * JWT Dependencies
     */
    compile 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1'

    /**
     * Test Dependencies
     */
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.1") {
        exclude module:'junit-platform-commons'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:1.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-commons:1.5.1")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.5.1")
    testImplementation 'org.springframework.security:spring-security-test'

    /**
     * RestDocs
     */
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')

    /**
     * aws sdk
     */
    implementation platform('software.amazon.awssdk:bom:2.13.33')
    implementation 'software.amazon.awssdk:s3'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }

    finalizedBy 'jacocoTestReport'
}
/*************************
 * JIB
 *************************/
jib.containerizingMode = "packaged"

/*************************
 * Query DSL
 *************************/
def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

idea {
    module {
        sourceDirs = sourceSets.main.java.srcDirs
        generatedSourceDirs += file("src/main/generated")
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

/*************************
 * Rest Docs
 *************************/
asciidoctor {
    dependsOn test
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

/*************************
 * Source Sets
 *************************/
ext.profile = (!project.hasProperty('profile') || !profile || !['local', 'dev', 'prod', 'test'].contains(profile)) ? 'local' : profile
ext.profile = project.gradle.startParameter.taskNames.toString().contains(':test')? 'test': ext.profile

sourceSets {
    main {
        java {
            // generated 는 QueryDSL의 디렉토리
            srcDirs "build/generated/sources/annotationProcessor/java/main", "src/main/java", querydslSrcDir
        }
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }
    }
}

/*************************
 * jacoco 코드 커버리지 분
 *************************/

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled false
        xml.enabled true
        csv.enabled false

        html.destination file("$buildDir/jacoco/jacoco.html")
        xml.destination file("$buildDir/jacoco/jacoco.xml")
    }

//    이 설정을 열어주면 Code Coverage가 일정 이상이어야 Build됨
//    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
            limit {
                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
                minimum = 0.30
            }
        }

        rule {
            // 룰을 간단히 켜고 끌 수 있다.
            enabled = true

            // 룰을 체크할 단위는 클래스 단위
            element = 'CLASS'

            // 브랜치 커버리지를 최소한 50% 만족시켜야 한다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            // 라인 커버리지를 최소한 50% 만족시켜야 한다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 300라인으로 제한한다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 300
//              maximum = 8
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    '*.test.*',
            ]
        }
    }
}

/*************************
 * Flyway DB 변경 이력 관리
 *************************/

flyway {
//    schemas = ['apjung']
    baselineVersion = 0
    encoding = 'UTF-8'
    validateOnMigrate = true
    baselineOnMigrate = true
    locations = ["filesystem:${file('src/main/resources/db/migration').absolutePath}"]
    configFiles = ["${file("src/flyway/conf/flyway-${profile}.conf").absolutePath}"]
}